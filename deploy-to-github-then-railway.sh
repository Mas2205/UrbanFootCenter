#!/bin/bash

echo "üöÄ === D√âPLOIEMENT URBAN FOOT CENTER VIA GITHUB ‚Üí RAILWAY ==="
echo ""

# Couleurs
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
RED='\033[0;31m'
NC='\033[0m'

print_status() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# V√©rifier que nous sommes dans un repo git
if [ ! -d ".git" ]; then
    print_error "Ce r√©pertoire n'est pas un repository Git"
    exit 1
fi

print_status "Repository Git d√©tect√©"

# V√©rifier le statut Git
print_info "V√©rification du statut Git..."
git status

echo ""
print_info "=== √âTAPE 1: PR√âPARATION DES CHANGEMENTS ==="

# Ajouter tous les fichiers modifi√©s
print_info "Ajout des fichiers modifi√©s..."

# Fichiers sp√©cifiques du syst√®me de paiement en esp√®ces
git add backend/src/controllers/reservation_with_payment.controller.js
git add backend/src/routes/reservation_with_payment.routes.js
git add backend/src/routes/index.js
git add backend/src/controllers/payment.controller.js
git add backend/src/controllers/availability.controller.js

# Scripts de d√©ploiement
git add scripts/
git add DEPLOYMENT-CHECKLIST.md
git add deploy-production.sh

# Autres fichiers potentiellement modifi√©s
git add backend/src/routes/reservation.routes.js 2>/dev/null || true

print_status "Fichiers ajout√©s au staging"

# Afficher les changements √† commiter
echo ""
print_info "Changements √† commiter :"
git diff --cached --name-only

echo ""
print_info "=== √âTAPE 2: COMMIT DES CHANGEMENTS ==="

# Cr√©er un commit descriptif
COMMIT_MESSAGE="feat: Syst√®me de paiement en esp√®ces complet

‚úÖ Fonctionnalit√©s ajout√©es :
- Paiement en esp√®ces pour les r√©servations
- Validation des paiements par admin terrain
- API /api/reservations/with-payment fonctionnelle
- Interface admin terrain pour gestion paiements
- Gestion d'erreurs robuste avec logs d√©taill√©s

üîß Corrections techniques :
- Suppression route conflictuelle reservation.routes.js
- Correction champs Payment model (payment_date vs paid_at)
- Adaptation logique sans time_slot_id
- Attribution terrains aux admins pour acc√®s API
- Gestion transactions Sequelize optimis√©e

üìã Migrations requises en production :
- ALTER TYPE payment_methods_payment_type ADD VALUE 'especes'
- ALTER TYPE enum_reservations_payment_status ADD VALUE 'pending_cash'

üöÄ Pr√™t pour d√©ploiement en production"

git commit -m "$COMMIT_MESSAGE"

if [ $? -eq 0 ]; then
    print_status "Commit cr√©√© avec succ√®s"
else
    print_error "√âchec du commit"
    exit 1
fi

echo ""
print_info "=== √âTAPE 3: PUSH VERS GITHUB ==="

# V√©rifier la branche actuelle
CURRENT_BRANCH=$(git branch --show-current)
print_info "Branche actuelle : $CURRENT_BRANCH"

# Push vers GitHub
print_info "Push vers GitHub..."
git push origin $CURRENT_BRANCH

if [ $? -eq 0 ]; then
    print_status "Code pouss√© vers GitHub avec succ√®s"
else
    print_error "√âchec du push vers GitHub"
    exit 1
fi

echo ""
print_info "=== √âTAPE 4: D√âPLOIEMENT AUTOMATIQUE RAILWAY ==="

print_info "Railway va maintenant d√©ployer automatiquement depuis GitHub..."
print_warning "Attendez quelques minutes pour que Railway d√©tecte et d√©ploie les changements"

# Optionnel : d√©clencher manuellement le d√©ploiement Railway
read -p "Voulez-vous d√©clencher manuellement le d√©ploiement Railway ? (y/N) : " trigger_railway

if [[ $trigger_railway =~ ^[Yy]$ ]]; then
    if command -v railway &> /dev/null; then
        print_info "D√©clenchement du d√©ploiement Railway..."
        cd backend
        railway up --detach
        cd ..
        print_status "D√©ploiement Railway d√©clench√©"
    else
        print_warning "Railway CLI non install√©, d√©ploiement automatique via GitHub webhook"
    fi
fi

echo ""
print_info "=== √âTAPE 5: MIGRATIONS BASE DE DONN√âES ==="

print_warning "IMPORTANT: Apr√®s le d√©ploiement Railway, ex√©cutez les migrations :"
echo ""
echo "1. Connectez-vous au dashboard Railway"
echo "2. Ouvrez la console de votre service backend"
echo "3. Ex√©cutez ces commandes :"
echo ""
echo "node -e \""
echo "const { Client } = require('pg');"
echo "(async () => {"
echo "  const client = new Client({"
echo "    connectionString: process.env.DATABASE_URL,"
echo "    ssl: { rejectUnauthorized: false }"
echo "  });"
echo "  try {"
echo "    await client.connect();"
echo "    await client.query(\\\`ALTER TYPE payment_methods_payment_type ADD VALUE IF NOT EXISTS 'especes';\\\`);"
echo "    await client.query(\\\`ALTER TYPE enum_reservations_payment_status ADD VALUE IF NOT EXISTS 'pending_cash';\\\`);"
echo "    console.log('‚úÖ Migrations termin√©es');"
echo "  } catch (e) {"
echo "    console.log('‚ÑπÔ∏è', e.message);"
echo "  } finally {"
echo "    await client.end();"
echo "  }"
echo "})();"
echo "\""

echo ""
print_status "=== D√âPLOIEMENT GITHUB ‚Üí RAILWAY TERMIN√â ! ==="
echo ""
print_info "Prochaines √©tapes :"
echo "  1. ‚è≥ Attendre le d√©ploiement automatique Railway (2-5 min)"
echo "  2. üóÑÔ∏è  Ex√©cuter les migrations de base de donn√©es"
echo "  3. ‚úÖ Tester les nouvelles fonctionnalit√©s"
echo ""
print_info "URLs de production :"
echo "  üåê Backend: https://urbanfootcenter-production.up.railway.app"
echo "  üåê Frontend: https://urban-foot-center.vercel.app"
echo ""
print_status "Le syst√®me de paiement en esp√®ces sera bient√¥t actif ! üéâ"
