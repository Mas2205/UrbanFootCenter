require('dotenv').config();
const express = require('express');
const cors = require('cors');
const helmet = require('helmet');
const morgan = require('morgan');
const http = require('http');
const socketIO = require('socket.io');

// Import du router centralis√©
const apiRoutes = require('./routes/index');

// Import des middlewares
const { errorHandler } = require('./middlewares/error.middleware');
const { authMiddleware } = require('./middlewares/auth.middleware');
const { demoMode } = require('./middlewares/demo-mode.middleware');
const { 
  generalRateLimit, 
  authRateLimit, 
  paymentRateLimit, 
  uploadRateLimit,
  httpsRedirect,
  corsValidation,
  jwtValidation,
  inputSanitization
} = require('./middlewares/security.middleware');

// Import de la configuration de base de donn√©es
const { sequelize } = require('./config/database');

// Import du planificateur de championnats
const ChampionnatScheduler = require('./utils/championnatScheduler');

// Import des mod√®les pour cr√©er des donn√©es de test
const { User, Field, TimeSlot } = require('./models');

// Configuration du serveur
const app = express();

// Configuration trust proxy pour Railway (s√©curis√©e)
app.set('trust proxy', process.env.NODE_ENV === 'production' ? 1 : false);

const server = http.createServer(app);
const io = socketIO(server, {
  cors: {
    origin: process.env.CORS_ORIGIN || '*',
    methods: ['GET', 'POST']
  }
});

// Configuration s√©curis√©e de CORS
const corsOptions = {
  origin: function (origin, callback) {
    const allowedOrigins = process.env.CORS_ORIGIN ? 
      process.env.CORS_ORIGIN.split(',').map(o => o.trim()) : 
      ['http://localhost:3000', 'http://localhost:3001'];
    
    // Permettre les requ√™tes sans origine (mobile apps, Postman, etc.)
    if (!origin) return callback(null, true);
    
    if (allowedOrigins.indexOf(origin) !== -1 || process.env.NODE_ENV === 'development') {
      callback(null, true);
    } else {
      callback(new Error('Non autoris√© par CORS'));
    }
  },
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'PATCH'],
  allowedHeaders: ['Content-Type', 'Authorization', 'X-Requested-With'],
  credentials: true,
  optionsSuccessStatus: 200
};

// Middlewares de s√©curit√©
app.use(httpsRedirect); // Redirection HTTPS en production
app.use(corsValidation); // Validation des origines
app.use(cors(corsOptions));

// Configuration Helmet s√©curis√©e
app.use(helmet({
  contentSecurityPolicy: process.env.NODE_ENV === 'production' ? {
    directives: {
      defaultSrc: ["'self'"],
      styleSrc: ["'self'", "'unsafe-inline'"],
      scriptSrc: ["'self'"],
      imgSrc: ["'self'", "data:", "https:"],
      connectSrc: ["'self'"],
      fontSrc: ["'self'"],
      objectSrc: ["'none'"],
      mediaSrc: ["'self'"],
      frameSrc: ["'none'"],
    },
  } : false,
  crossOriginResourcePolicy: { policy: "cross-origin" },
  hsts: process.env.NODE_ENV === 'production' ? {
    maxAge: 31536000,
    includeSubDomains: true,
    preload: true
  } : false
}));

app.use(morgan(process.env.NODE_ENV === 'production' ? 'combined' : 'dev'));
app.use(inputSanitization); // Nettoyage des entr√©es
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true, limit: '10mb' }));
app.use(jwtValidation); // Validation basique des tokens

// Debug: Log des requ√™tes vers /uploads
app.use('/uploads', (req, res, next) => {
  console.log('Requ√™te fichier statique:', req.url);
  next();
});

// Servir les fichiers statiques (images upload√©es)
app.use('/uploads', express.static('uploads'));

// Rate limiting par type de route
app.use('/api/auth/login', authRateLimit);
app.use('/api/auth/register', authRateLimit);
app.use('/api/auth/forgot-password', authRateLimit);
app.use('/api/payments', paymentRateLimit);
app.use('/uploads', uploadRateLimit);
// Rate limiting seulement en production
if (process.env.NODE_ENV === 'production') {
  app.use('/api', generalRateLimit);
} else {
  console.log('‚ö†Ô∏è Rate limiting d√©sactiv√© en d√©veloppement');
}

// Configuration globale pour le mode d√©mo
global.DB_MODE = 'normal'; // Par d√©faut, mode normal

// Middleware pour le mode d√©mo (si PostgreSQL n'est pas disponible)
app.use('/api', demoMode);

// Configuration des routes (toutes regroup√©es dans le routeur principal)
app.use('/api', apiRoutes);

// Route de sant√©
app.get('/health', (req, res) => {
  res.status(200).json({ status: 'ok', timestamp: new Date() });
});

// Middleware de gestion des erreurs
app.use(errorHandler);

// Configuration de Socket.IO pour les notifications en temps r√©el
io.on('connection', (socket) => {
  console.log('Client connect√©:', socket.id);
  
  // Authentification du socket
  socket.on('authenticate', (token) => {
    try {
      // V√©rification du token JWT
      // Si valide, attribuer l'utilisateur √† ce socket pour les notifications personnalis√©es
    } catch (error) {
      socket.emit('auth_error', { message: '√âchec de l\'authentification' });
    }
  });

  // Gestion des √©v√©nements de r√©servation en temps r√©el
  socket.on('join_field', (fieldId) => {
    socket.join(`field:${fieldId}`);
  });

  socket.on('leave_field', (fieldId) => {
    socket.leave(`field:${fieldId}`);
  });

  socket.on('disconnect', () => {
    console.log('Client d√©connect√©:', socket.id);
  });
});

// Fonction pour cr√©er des donn√©es de test
async function createSampleData() {
  try {
    // V√©rifier si des terrains existent d√©j√†
    const fieldCount = await Field.count();
    if (fieldCount > 0) {
      console.log(`‚úÖ ${fieldCount} terrain(s) d√©j√† pr√©sent(s) dans la base`);
      return;
    }

    console.log('üå± Cr√©ation de donn√©es de test...');

    // Cr√©er des terrains de test
    const sampleFields = [
      {
        name: 'Terrain Central',
        description: 'Terrain principal avec gazon synth√©tique de qualit√©',
        size: '7v7',
        surface_type: 'Gazon synth√©tique',
        price_per_hour: 15000,
        location: 'Dakar, S√©n√©gal',
        equipment_fee: 2000,
        indoor: false,
        is_active: true
      },
      {
        name: 'Terrain VIP',
        description: 'Terrain premium avec √©clairage LED et vestiaires',
        size: '11v11',
        surface_type: 'Gazon naturel',
        price_per_hour: 25000,
        location: 'Almadies, Dakar',
        equipment_fee: 3000,
        indoor: false,
        is_active: true
      },
      {
        name: 'Terrain Indoor',
        description: 'Terrain couvert climatis√© pour toute saison',
        size: '5v5',
        surface_type: 'Parquet',
        price_per_hour: 20000,
        location: 'Plateau, Dakar',
        equipment_fee: 1500,
        indoor: true,
        is_active: true
      }
    ];

    for (const fieldData of sampleFields) {
      await Field.create(fieldData);
    }

    console.log('‚úÖ Donn√©es de test cr√©√©es avec succ√®s');
  } catch (error) {
    console.error('‚ùå Erreur lors de la cr√©ation des donn√©es de test:', error);
  }
}

// Export des instances pour les tests
module.exports = { app, server, io };

// D√©marrage du serveur
if (process.env.NODE_ENV !== 'test') {
  const PORT = process.env.PORT || 5000;
  
    // D√©marrer le serveur avec gestion des erreurs de port
  const startServer = (port) => {
    // S'assurer que le port est un nombre
    const portNumber = parseInt(port, 10);
    
    server.listen(portNumber, '0.0.0.0')
      .on('listening', async () => {
        console.log(`Serveur en cours d'ex√©cution sur le port ${portNumber} (accessible depuis le r√©seau)`);
        
        // Setup automatique en production
        try {
          const setupProduction = require('./config/setup-production');
          await setupProduction();
        } catch (error) {
          console.log('‚ö†Ô∏è  Setup production ignor√©:', error.message);
        }
      })
      .on('error', (err) => {
        if (err.code === 'EADDRINUSE') {
          const nextPort = portNumber + 1;
          console.warn(`Le port ${portNumber} est d√©j√† utilis√©, tentative avec le port ${nextPort}`);
          startServer(nextPort);
        } else {
          console.error('Erreur lors du d√©marrage du serveur:', err);
        }
      });
  };
  
  // D√©marrer le serveur sur le port sp√©cifi√©
  startServer(PORT);
  
  // Tentative de connexion √† la base de donn√©es (non bloquante)
  sequelize.authenticate()
    .then(() => {
      console.log('Connexion √† la base de donn√©es √©tablie avec succ√®s');
      global.DB_MODE = 'normal';
      
      // Synchronisation conditionnelle pour √©viter les conflits de vue en production
      if (process.env.NODE_ENV !== 'production') {
        console.log('Synchronisation des mod√®les avec la base de donn√©es (d√©veloppement)...');
        return sequelize.authenticate().then(() => {
          console.log('‚úÖ Synchronisation termin√©e avec succ√®s - Tables cr√©√©es');
        }).then(() => {
          console.log('‚úÖ Synchronisation termin√©e avec succ√®s - Tables cr√©√©es');
          
          // Initialiser le planificateur de championnats (temporairement d√©sactiv√©)
          // ChampionnatScheduler.init();
          console.log('‚ö†Ô∏è Planificateur de championnats temporairement d√©sactiv√©');
          
          return createSampleData();
        }).catch(err => {
          console.error('‚ùå Erreur lors de la synchronisation:', err);
        });
      } else {
        console.log('‚ÑπÔ∏è  Utilisez /api/admin-setup/fix-view-conflict pour corriger manuellement');
        
        // En production, juste cr√©er les donn√©es de test si n√©cessaire
        return createSampleData().catch(err => {
          console.log('‚ö†Ô∏è  Cr√©ation donn√©es de test ignor√©e:', err.message);
        });
      }
    })
    .catch(err => {
      // Activer le mode d√©mo quand PostgreSQL n'est pas disponible
      global.DB_MODE = 'demo';
      
      console.warn('\x1b[33m=================================================\x1b[0m');
      console.warn('\x1b[33m    ATTENTION: Base de donn√©es PostgreSQL non disponible    \x1b[0m');
      console.warn('\x1b[33m    L\'API fonctionne en MODE D√âMO avec des donn√©es statiques    \x1b[0m');
      console.warn('\x1b[33m    Pour une exp√©rience compl√®te avec UUID v4 s√©curis√©s:    \x1b[0m');
      console.warn('\x1b[33m    1. Installez PostgreSQL    \x1b[0m');
      console.warn('\x1b[33m    2. Cr√©ez un utilisateur et une base "urban_foot_center"    \x1b[0m'); 
      console.warn('\x1b[33m    3. Ajustez DB_USER et DB_PASSWORD dans .env    \x1b[0m');
      console.warn('\x1b[33m=================================================\x1b[0m');
      console.error('D√©tail de l\'erreur:', err.message);
    });
}
