const { User, sequelize } = require('../models');
const bcrypt = require('bcryptjs');

// Email de l'administrateur
const adminEmail = 'mas@exemple.com';

// Nouveau mot de passe souhait√©
const newPassword = 'AdminUrbanFoot2025!'; // Mot de passe fort et m√©morisable

async function resetAdminPassword() {
  try {
    console.log('=== R√âINITIALISATION DU MOT DE PASSE ADMINISTRATEUR ===');
    console.log(`Email administrateur: ${adminEmail}`);

    // Recherche de l'utilisateur
    const user = await User.findOne({ where: { email: adminEmail } });
    
    if (!user) {
      console.log('‚ùå Utilisateur non trouv√©!');
      return;
    }
    
    console.log(`‚úÖ Utilisateur trouv√©: ID=${user.id}, Role=${user.role}`);

    // Cr√©ation du hash du nouveau mot de passe
    const passwordHash = await bcrypt.hash(newPassword, 10);
    
    // Mise √† jour du mot de passe
    await user.update({ password_hash: passwordHash });
    
    console.log('‚úÖ Mot de passe mis √† jour avec succ√®s');
    console.log(`üìù Nouveau mot de passe: ${newPassword}`);
    console.log('üîê Vous pouvez maintenant vous connecter avec ce mot de passe');

  } catch (error) {
    console.error('‚ùå Erreur lors de la r√©initialisation du mot de passe:', error);
  } finally {
    // Fermeture de la connexion
    await sequelize.close();
  }
}

// Ex√©cution de la fonction
resetAdminPassword();
