const { sequelize, Reservation, Field, TimeSlot, User, Payment, PromoCode } = require('../models');
const { Op } = require('sequelize');

async function debugApiError() {
  const transaction = await sequelize.transaction();
  
  try {
    console.log('üîß === SIMULATION COMPL√àTE DE L\'API ===');
    
    // Donn√©es exactes de la requ√™te qui √©choue
    const requestData = {
      field_id: 'a727274a-4068-414d-a2d6-0970697c2cdb',
      time_slot_id: 'd0c622f6-c57a-4ba3-83ae-58bf2bb66be4',
      reservation_date: '2025-10-06',
      start_time: '13:00-14:00',
      equipment_rental: false,
      payment_method: 'cash',
      promo_code: null
    };
    
    const user_id = 'd7a1b392-f061-48f6-bfc6-41879638fc60';
    
    console.log('üì§ Donn√©es de la requ√™te:', requestData);
    console.log('üë§ User ID:', user_id);
    
    // √âtape 1: V√©rification du terrain
    console.log('\nüîç √âtape 1: V√©rification du terrain...');
    const field = await Field.findByPk(requestData.field_id);
    if (!field || !field.is_active) {
      throw new Error('Terrain non trouv√© ou inactif');
    }
    console.log('‚úÖ Terrain trouv√©:', field.name);
    
    // √âtape 2: V√©rification du cr√©neau horaire
    console.log('\nüîç √âtape 2: V√©rification du cr√©neau horaire...');
    const timeSlot = await TimeSlot.findByPk(requestData.time_slot_id);
    if (!timeSlot || !timeSlot.is_available) {
      throw new Error('Cr√©neau horaire non trouv√© ou non disponible');
    }
    console.log('‚úÖ Cr√©neau horaire trouv√©:', timeSlot.start_time, '-', timeSlot.end_time);
    
    // √âtape 3: V√©rification de correspondance terrain/cr√©neau
    console.log('\nüîç √âtape 3: V√©rification correspondance terrain/cr√©neau...');
    if (timeSlot.field_id !== requestData.field_id) {
      throw new Error('Le cr√©neau horaire ne correspond pas au terrain s√©lectionn√©');
    }
    console.log('‚úÖ Terrain et cr√©neau correspondent');
    
    // √âtape 4: Calcul des heures
    console.log('\nüîç √âtape 4: Calcul des heures...');
    let calculatedStartTime, calculatedEndTime;
    if (requestData.start_time && requestData.start_time.includes('-')) {
      const [startPart, endPart] = requestData.start_time.split('-');
      calculatedStartTime = startPart + ':00';
      calculatedEndTime = endPart + ':00';
    } else {
      calculatedStartTime = timeSlot.start_time;
      calculatedEndTime = timeSlot.end_time;
    }
    console.log('‚úÖ Heures calcul√©es:', { calculatedStartTime, calculatedEndTime });
    
    // √âtape 5: V√©rification des conflits
    console.log('\nüîç √âtape 5: V√©rification des conflits...');
    const existingReservation = await Reservation.findOne({
      where: {
        field_id: requestData.field_id,
        reservation_date: requestData.reservation_date,
        start_time: calculatedStartTime,
        status: {
          [Op.in]: ['confirmed', 'pending']
        }
      }
    });
    
    if (existingReservation) {
      throw new Error('Ce cr√©neau est d√©j√† r√©serv√© pour cette date');
    }
    console.log('‚úÖ Aucun conflit d√©tect√©');
    
    // √âtape 6: Calcul du prix
    console.log('\nüîç √âtape 6: Calcul du prix...');
    let totalPrice = field.price_per_hour;
    console.log('‚úÖ Prix calcul√©:', totalPrice, 'FCFA');
    
    // √âtape 7: Traitement du paiement
    console.log('\nüîç √âtape 7: Traitement du paiement...');
    let paymentResult;
    let reservationStatus;
    let paymentStatus;
    
    if (requestData.payment_method === 'cash' || requestData.payment_method === 'especes') {
      paymentResult = {
        success: true,
        transactionId: `CASH_${Date.now()}_${user_id}`,
        message: 'Paiement en esp√®ces - √Ä r√©gler sur place au terrain',
        apiResponse: { method: 'especes', status: 'pending' }
      };
      reservationStatus = 'confirmed';
      paymentStatus = 'pending';
    }
    console.log('‚úÖ Paiement trait√©:', paymentResult);
    
    // √âtape 8: Cr√©ation de la r√©servation
    console.log('\nüîç √âtape 8: Cr√©ation de la r√©servation...');
    const reservationData = {
      user_id,
      field_id: requestData.field_id,
      reservation_date: requestData.reservation_date,
      start_time: calculatedStartTime,
      end_time: calculatedEndTime,
      total_price: totalPrice,
      status: reservationStatus,
      payment_status: paymentStatus
    };
    
    console.log('üìù Donn√©es de r√©servation:', reservationData);
    
    const reservation = await Reservation.create(reservationData, { transaction });
    console.log('‚úÖ R√©servation cr√©√©e avec ID:', reservation.id);
    
    // √âtape 9: Cr√©ation du paiement
    console.log('\nüîç √âtape 9: Cr√©ation du paiement...');
    const paymentData = {
      reservation_id: reservation.id,
      amount: totalPrice,
      payment_method: requestData.payment_method === 'cash' ? 'especes' : requestData.payment_method,
      payment_status: paymentStatus,
      transaction_id: paymentResult.transactionId,
      payment_date: paymentStatus === 'completed' ? new Date() : null,
      payment_details: paymentResult.apiResponse
    };
    
    console.log('üí≥ Donn√©es de paiement:', paymentData);
    
    const payment = await Payment.create(paymentData, { transaction });
    console.log('‚úÖ Paiement cr√©√© avec ID:', payment.id);
    
    // √âtape 10: Commit
    console.log('\nüîç √âtape 10: Commit de la transaction...');
    await transaction.commit();
    console.log('‚úÖ Transaction commit√©e avec succ√®s !');
    
    console.log('\nüéâ === SIMULATION R√âUSSIE ===');
    console.log('La logique compl√®te fonctionne correctement !');
    
  } catch (error) {
    await transaction.rollback();
    console.error('\nüö® === ERREUR D√âTECT√âE ===');
    console.error('Message:', error.message);
    console.error('Stack:', error.stack);
    
    if (error.sql) {
      console.error('SQL:', error.sql);
    }
  } finally {
    await sequelize.close();
  }
}

// Ex√©cuter le debug
debugApiError();
