// Setup automatique en production
const { sequelize } = require('./database');

async function setupProduction() {
  // Ne s'ex√©cute qu'en production
  if (process.env.NODE_ENV !== 'production') {
    return;
  }

  console.log('üöÄ === SETUP AUTOMATIQUE PRODUCTION ===');
  
  try {
    // Attendre que la DB soit pr√™te
    await sequelize.authenticate();
    console.log('‚úÖ Connexion DB √©tablie');

    // 1. Ajouter les ENUMs manquants
    try {
      await sequelize.query(`ALTER TYPE payment_methods_payment_type ADD VALUE IF NOT EXISTS 'especes';`);
      console.log('‚úÖ ENUM especes ajout√©');
    } catch (e) {
      console.log('‚ÑπÔ∏è  ENUM especes existe d√©j√†');
    }

    try {
      await sequelize.query(`ALTER TYPE enum_reservations_payment_status ADD VALUE IF NOT EXISTS 'pending_cash';`);
      console.log('‚úÖ ENUM pending_cash ajout√©');
    } catch (e) {
      console.log('‚ÑπÔ∏è  ENUM pending_cash existe d√©j√†');
    }

    // 2. Cr√©er les vues KPI
    await sequelize.query(`
      CREATE OR REPLACE VIEW kpi_reservations_by_date AS
      SELECT 
        DATE(reservation_date) as reservation_date,
        COUNT(*) as total_reservations,
        SUM(CAST(total_price AS DECIMAL)) as total_revenue
      FROM reservations 
      WHERE status IN ('confirmed', 'completed')
      GROUP BY DATE(reservation_date)
      ORDER BY reservation_date DESC;
    `);
    console.log('‚úÖ Vue kpi_reservations_by_date cr√©√©e');

    await sequelize.query(`
      CREATE OR REPLACE VIEW kpi_reservations_by_field AS
      SELECT 
        f.id as field_id,
        f.name as field_name,
        COUNT(r.id) as total_reservations,
        SUM(CAST(r.total_price AS DECIMAL)) as total_revenue
      FROM fields f
      LEFT JOIN reservations r ON f.id = r.field_id 
        AND r.status IN ('confirmed', 'completed')
      GROUP BY f.id, f.name
      ORDER BY total_reservations DESC;
    `);
    console.log('‚úÖ Vue kpi_reservations_by_field cr√©√©e');

    // Test rapide
    const [test] = await sequelize.query('SELECT COUNT(*) as count FROM kpi_reservations_by_date LIMIT 1');
    console.log('üéâ Setup termin√© - Test:', test[0].count, 'enregistrements');

  } catch (error) {
    console.error('‚ùå Erreur setup production:', error.message);
    // Ne pas faire planter l'app, juste logger l'erreur
  }
}

module.exports = setupProduction;
