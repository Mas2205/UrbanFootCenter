// Script pour corriger le conflit de vue avec la table fields
const { sequelize } = require('./src/config/database');

async function fixViewConflict() {
  console.log('üöÄ === CORRECTION CONFLIT VUE FIELDS ===');
  
  try {
    await sequelize.authenticate();
    console.log('‚úÖ Connexion DB √©tablie');

    // 1. Supprimer les vues qui d√©pendent de la table fields
    console.log('üóëÔ∏è  Suppression des vues d√©pendantes...');
    
    await sequelize.query('DROP VIEW IF EXISTS kpi_reservations_by_field CASCADE;');
    console.log('‚úÖ Vue kpi_reservations_by_field supprim√©e');

    await sequelize.query('DROP VIEW IF EXISTS kpi_reservations_by_date CASCADE;');
    console.log('‚úÖ Vue kpi_reservations_by_date supprim√©e');

    // 2. Forcer la synchronisation des mod√®les
    console.log('üîÑ Synchronisation des mod√®les...');
    await sequelize.sync({ alter: true });
    console.log('‚úÖ Mod√®les synchronis√©s');

    // 3. Recr√©er les vues avec la nouvelle structure
    console.log('üîÑ Recr√©ation des vues...');
    
    await sequelize.query(`
      CREATE OR REPLACE VIEW kpi_reservations_by_date AS
      SELECT 
        DATE(reservation_date) as reservation_date,
        COUNT(*) as total_reservations,
        SUM(CAST(total_price AS DECIMAL)) as total_revenue
      FROM reservations 
      WHERE status IN ('confirmed', 'completed')
      GROUP BY DATE(reservation_date)
      ORDER BY reservation_date DESC;
    `);
    console.log('‚úÖ Vue kpi_reservations_by_date recr√©√©e');

    await sequelize.query(`
      CREATE OR REPLACE VIEW kpi_reservations_by_field AS
      SELECT 
        f.id as field_id,
        f.name as field_name,
        COUNT(r.id) as total_reservations,
        SUM(CAST(r.total_price AS DECIMAL)) as total_revenue
      FROM fields f
      LEFT JOIN reservations r ON f.id = r.field_id 
        AND r.status IN ('confirmed', 'completed')
      GROUP BY f.id, f.name
      ORDER BY total_reservations DESC;
    `);
    console.log('‚úÖ Vue kpi_reservations_by_field recr√©√©e');

    // 4. Test des vues
    const [test1] = await sequelize.query('SELECT COUNT(*) as count FROM kpi_reservations_by_date LIMIT 1');
    const [test2] = await sequelize.query('SELECT COUNT(*) as count FROM kpi_reservations_by_field LIMIT 1');
    
    console.log('üéâ Tests r√©ussis:');
    console.log(`   - kpi_reservations_by_date: ${test1[0].count} enregistrements`);
    console.log(`   - kpi_reservations_by_field: ${test2[0].count} enregistrements`);

    console.log('‚úÖ Conflit de vue r√©solu avec succ√®s !');

  } catch (error) {
    console.error('‚ùå Erreur:', error.message);
    throw error;
  } finally {
    await sequelize.close();
  }
}

// Ex√©cuter si appel√© directement
if (require.main === module) {
  fixViewConflict().catch(console.error);
}

module.exports = fixViewConflict;
