#!/usr/bin/env node

const crypto = require('crypto');
const fs = require('fs');
const path = require('path');

/**
 * G√©n√©rateur de cl√©s s√©curis√©es pour Urban Foot Center
 */

// Fonction pour g√©n√©rer une cl√© al√©atoire s√©curis√©e
function generateSecureKey(length = 64) {
  return crypto.randomBytes(length).toString('hex');
}

// Fonction pour g√©n√©rer un mot de passe fort
function generateStrongPassword(length = 32) {
  const charset = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+-=[]{}|;:,.<>?';
  let password = '';
  
  for (let i = 0; i < length; i++) {
    password += charset.charAt(Math.floor(Math.random() * charset.length));
  }
  
  return password;
}

// Fonction pour g√©n√©rer un UUID v4
function generateUUID() {
  return crypto.randomUUID();
}

console.log('üîê G√©n√©rateur de cl√©s s√©curis√©es Urban Foot Center\n');

// G√©n√©ration des cl√©s
const keys = {
  JWT_SECRET: generateSecureKey(64),
  SESSION_SECRET: generateSecureKey(64),
  DB_PASSWORD: generateStrongPassword(24),
  ENCRYPTION_KEY: generateSecureKey(32),
  API_KEY: generateSecureKey(48),
  WEBHOOK_SECRET: generateSecureKey(32)
};

console.log('‚úÖ Cl√©s g√©n√©r√©es avec succ√®s:\n');

// Affichage des cl√©s g√©n√©r√©es
Object.entries(keys).forEach(([key, value]) => {
  console.log(`${key}=${value}`);
});

console.log('\nüìã Instructions:');
console.log('1. Copiez ces cl√©s dans votre fichier .env de production');
console.log('2. Ne partagez JAMAIS ces cl√©s');
console.log('3. Utilisez des cl√©s diff√©rentes pour chaque environnement');
console.log('4. Sauvegardez ces cl√©s de mani√®re s√©curis√©e');

// Option pour sauvegarder dans un fichier
const saveToFile = process.argv.includes('--save');

if (saveToFile) {
  const envContent = `# Cl√©s g√©n√©r√©es automatiquement - ${new Date().toISOString()}
# ATTENTION: Gardez ces cl√©s secr√®tes et s√©curis√©es

${Object.entries(keys).map(([key, value]) => `${key}=${value}`).join('\n')}

# Autres variables √† configurer manuellement:
NODE_ENV=production
PORT=5001
DB_HOST=localhost
DB_PORT=5432
DB_NAME=urban_foot_center
DB_USER=postgres
CORS_ORIGIN=https://votre-domaine.com
MAIL_HOST=smtp.example.com
MAIL_PORT=587
MAIL_USER=VOTRE_EMAIL@EXAMPLE.COM
MAIL_PASS=VOTRE_MOT_DE_PASSE_APP
MAIL_FROM=no-reply@votre-domaine.com
`;

  const filename = `secure-keys-${Date.now()}.env`;
  fs.writeFileSync(filename, envContent);
  console.log(`\nüíæ Cl√©s sauvegard√©es dans: ${filename}`);
  console.log('‚ö†Ô∏è  Supprimez ce fichier apr√®s avoir copi√© les cl√©s!');
}

console.log('\nüîí Conseils de s√©curit√©:');
console.log('‚Ä¢ Utilisez HTTPS en production');
console.log('‚Ä¢ Activez le rate limiting');
console.log('‚Ä¢ Configurez CORS correctement');
console.log('‚Ä¢ Surveillez les logs d\'acc√®s');
console.log('‚Ä¢ Effectuez des sauvegardes r√©guli√®res');
console.log('‚Ä¢ Mettez √† jour les d√©pendances r√©guli√®rement');

// V√©rification de la force des cl√©s
console.log('\nüõ°Ô∏è  Analyse de s√©curit√©:');
Object.entries(keys).forEach(([key, value]) => {
  const entropy = value.length * Math.log2(16); // Pour hex
  const strength = entropy > 256 ? 'Tr√®s forte' : entropy > 128 ? 'Forte' : 'Faible';
  console.log(`${key}: ${strength} (${Math.round(entropy)} bits d'entropie)`);
});

console.log('\nüéØ Pr√™t pour le d√©ploiement s√©curis√©!');
