#!/bin/bash

echo "üöÄ === D√âPLOIEMENT SYST√àME PAIEMENT ESP√àCES EN PRODUCTION ==="
echo ""

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction pour afficher les messages color√©s
print_status() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

# V√©rification des pr√©requis
print_info "V√©rification des pr√©requis..."

# V√©rifier que nous sommes dans le bon r√©pertoire
if [ ! -f "package.json" ]; then
    print_error "Erreur: package.json non trouv√©. Ex√©cutez ce script depuis le r√©pertoire backend."
    exit 1
fi

print_status "R√©pertoire backend d√©tect√©"

# V√©rifier les variables d'environnement de production
if [ -z "$DATABASE_URL" ]; then
    print_error "Erreur: Variable DATABASE_URL non d√©finie pour la production"
    exit 1
fi

print_status "Variables d'environnement de production d√©tect√©es"

echo ""
print_info "=== √âTAPE 1: MISE √Ä JOUR DES ENUMS EN PRODUCTION ==="

# Script pour ajouter le type de paiement "especes"
cat > temp_add_especes_enum.js << 'EOF'
const { Client } = require('pg');

async function addEspecesEnum() {
  const client = new Client({
    connectionString: process.env.DATABASE_URL,
    ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false
  });

  try {
    await client.connect();
    console.log('‚úÖ Connexion √† la base de donn√©es √©tablie');

    // Ajouter "especes" √† l'ENUM payment_methods_payment_type
    try {
      await client.query(`
        ALTER TYPE payment_methods_payment_type ADD VALUE IF NOT EXISTS 'especes';
      `);
      console.log('‚úÖ Type "especes" ajout√© √† payment_methods_payment_type');
    } catch (error) {
      if (error.message.includes('already exists')) {
        console.log('‚ÑπÔ∏è  Type "especes" existe d√©j√† dans payment_methods_payment_type');
      } else {
        throw error;
      }
    }

    // Ajouter "pending_cash" √† l'ENUM enum_reservations_payment_status
    try {
      await client.query(`
        ALTER TYPE enum_reservations_payment_status ADD VALUE IF NOT EXISTS 'pending_cash';
      `);
      console.log('‚úÖ Statut "pending_cash" ajout√© √† enum_reservations_payment_status');
    } catch (error) {
      if (error.message.includes('already exists')) {
        console.log('‚ÑπÔ∏è  Statut "pending_cash" existe d√©j√† dans enum_reservations_payment_status');
      } else {
        throw error;
      }
    }

    console.log('üéâ Mise √† jour des ENUMs termin√©e avec succ√®s !');

  } catch (error) {
    console.error('‚ùå Erreur:', error.message);
    process.exit(1);
  } finally {
    await client.end();
  }
}

addEspecesEnum();
EOF

# Ex√©cuter le script de mise √† jour des ENUMs
print_info "Mise √† jour des ENUMs en production..."
node temp_add_especes_enum.js

if [ $? -eq 0 ]; then
    print_status "ENUMs mis √† jour avec succ√®s"
    rm temp_add_especes_enum.js
else
    print_error "√âchec de la mise √† jour des ENUMs"
    rm temp_add_especes_enum.js
    exit 1
fi

echo ""
print_info "=== √âTAPE 2: D√âPLOIEMENT DU CODE BACKEND ==="

# V√©rifier que tous les fichiers n√©cessaires sont pr√©sents
required_files=(
    "src/controllers/reservation_with_payment.controller.js"
    "src/routes/reservation_with_payment.routes.js"
    "src/routes/index.js"
    "src/controllers/payment.controller.js"
)

for file in "${required_files[@]}"; do
    if [ ! -f "$file" ]; then
        print_error "Fichier manquant: $file"
        exit 1
    fi
done

print_status "Tous les fichiers requis sont pr√©sents"

# Installer les d√©pendances
print_info "Installation des d√©pendances..."
npm install

if [ $? -eq 0 ]; then
    print_status "D√©pendances install√©es avec succ√®s"
else
    print_error "√âchec de l'installation des d√©pendances"
    exit 1
fi

# Red√©marrer l'application (selon votre plateforme de d√©ploiement)
print_info "Red√©marrage de l'application..."

# Pour Railway
if command -v railway &> /dev/null; then
    print_info "D√©ploiement sur Railway..."
    railway up
elif [ -f "Procfile" ]; then
    print_info "Red√©marrage via PM2 ou processus similaire..."
    # Commande de red√©marrage sp√©cifique √† votre environnement
    pm2 restart all || systemctl restart your-app-name || print_warning "Red√©marrage manuel requis"
else
    print_warning "Red√©marrage manuel requis"
fi

echo ""
print_info "=== √âTAPE 3: V√âRIFICATION POST-D√âPLOIEMENT ==="

# Script de v√©rification
cat > temp_verify_deployment.js << 'EOF'
const { Client } = require('pg');

async function verifyDeployment() {
  const client = new Client({
    connectionString: process.env.DATABASE_URL,
    ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false
  });

  try {
    await client.connect();
    console.log('‚úÖ Connexion √† la base de donn√©es √©tablie');

    // V√©rifier les ENUMs
    const enumsResult = await client.query(`
      SELECT 
        t.typname as enum_name,
        e.enumlabel as enum_value
      FROM pg_type t 
      JOIN pg_enum e ON t.oid = e.enumtypid  
      WHERE t.typname IN ('payment_methods_payment_type', 'enum_reservations_payment_status')
      AND e.enumlabel IN ('especes', 'pending_cash')
      ORDER BY t.typname, e.enumlabel;
    `);

    console.log('üìã ENUMs v√©rifi√©s:');
    enumsResult.rows.forEach(row => {
      console.log(`   ${row.enum_name}: ${row.enum_value}`);
    });

    if (enumsResult.rows.length >= 2) {
      console.log('‚úÖ Tous les ENUMs requis sont pr√©sents');
    } else {
      console.log('‚ùå ENUMs manquants d√©tect√©s');
      process.exit(1);
    }

    // V√©rifier la structure des tables
    const tablesResult = await client.query(`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public' 
      AND table_name IN ('reservations', 'payments', 'payment_methods')
      ORDER BY table_name;
    `);

    console.log('üìã Tables v√©rifi√©es:');
    tablesResult.rows.forEach(row => {
      console.log(`   ‚úÖ ${row.table_name}`);
    });

    console.log('üéâ V√©rification post-d√©ploiement r√©ussie !');

  } catch (error) {
    console.error('‚ùå Erreur de v√©rification:', error.message);
    process.exit(1);
  } finally {
    await client.end();
  }
}

verifyDeployment();
EOF

# Ex√©cuter la v√©rification
print_info "V√©rification du d√©ploiement..."
node temp_verify_deployment.js

if [ $? -eq 0 ]; then
    print_status "V√©rification r√©ussie"
    rm temp_verify_deployment.js
else
    print_error "√âchec de la v√©rification"
    rm temp_verify_deployment.js
    exit 1
fi

echo ""
print_status "=== D√âPLOIEMENT TERMIN√â AVEC SUCC√àS ! ==="
echo ""
print_info "Fonctionnalit√©s d√©ploy√©es:"
echo "  ‚úÖ Paiement en esp√®ces pour les r√©servations"
echo "  ‚úÖ Validation des paiements par les admins terrain"
echo "  ‚úÖ Gestion compl√®te du workflow esp√®ces"
echo "  ‚úÖ APIs /api/reservations/with-payment op√©rationnelle"
echo "  ‚úÖ Interface admin terrain fonctionnelle"
echo ""
print_info "Le syst√®me de paiement en esp√®ces est maintenant actif en production ! üéâ"
