#!/usr/bin/env node

/**
 * Script de test pour l'int√©gration OPTION 1 - Interface marketplace compl√®te
 * Usage: node test-option1-integration.js
 */

const axios = require('axios');

// Configuration
const API_BASE_URL = 'http://localhost:5001/api';
let authToken = '';

// Couleurs pour les logs
const colors = {
  reset: '\x1b[0m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m'
};

function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

function success(message) {
  log(`‚úÖ ${message}`, 'green');
}

function error(message) {
  log(`‚ùå ${message}`, 'red');
}

function info(message) {
  log(`‚ÑπÔ∏è  ${message}`, 'blue');
}

function warning(message) {
  log(`‚ö†Ô∏è  ${message}`, 'yellow');
}

// Fonction utilitaire pour les requ√™tes API
async function apiRequest(method, endpoint, data = null, useAuth = true) {
  try {
    const config = {
      method,
      url: `${API_BASE_URL}${endpoint}`,
      headers: {
        'Content-Type': 'application/json'
      }
    };

    if (useAuth && authToken) {
      config.headers.Authorization = `Bearer ${authToken}`;
    }

    if (data) {
      config.data = data;
    }

    const response = await axios(config);
    return { success: true, data: response.data };
  } catch (err) {
    return {
      success: false,
      error: err.response?.data?.message || err.message,
      status: err.response?.status
    };
  }
}

// 1. Test d'authentification
async function testAuthentication() {
  info('Test d\'authentification admin...');
  
  const loginResult = await apiRequest('POST', '/auth/login', {
    email: 'admin@example.com',
    password: 'admin123'
  }, false);

  if (loginResult.success) {
    authToken = loginResult.data.data.token;
    success('Authentification admin r√©ussie');
    return true;
  } else {
    error(`Authentification √©chou√©e: ${loginResult.error}`);
    return false;
  }
}

// 2. Test des routes marketplace
async function testMarketplaceRoutes() {
  info('Test des routes marketplace...');
  
  // Test health check
  const healthResult = await apiRequest('GET', '/marketplace/health');
  
  if (healthResult.success) {
    success('Route marketplace/health accessible');
    log(`Configuration: ${JSON.stringify(healthResult.data.data, null, 2)}`, 'cyan');
    return true;
  } else {
    if (healthResult.status === 403) {
      warning('Route health n√©cessite des privil√®ges admin (normal)');
      return true;
    } else {
      error(`Route health √©chou√©e: ${healthResult.error}`);
      return false;
    }
  }
}

// 3. Test cr√©ation moyen de paiement traditionnel
async function testTraditionalPaymentMethod() {
  info('Test cr√©ation moyen de paiement traditionnel...');
  
  const traditionalData = {
    field_id: 'test-field-id', // √Ä adapter selon votre terrain
    payment_type: 'wave',
    api_url: 'https://api.wave.com/test',
    api_key: 'test_api_key',
    api_secret: 'test_secret',
    merchant_id: 'test_merchant',
    mode: 'traditional'
  };

  const result = await apiRequest('POST', '/payment-methods', traditionalData);
  
  if (result.success) {
    success('Moyen de paiement traditionnel cr√©√©');
    log(`ID: ${result.data.data.id}`, 'cyan');
    return result.data.data;
  } else {
    warning(`Cr√©ation traditionnelle: ${result.error}`);
    return null;
  }
}

// 4. Test cr√©ation marketplace digital
async function testMarketplacePaymentMethod() {
  info('Test cr√©ation marketplace digital...');
  
  const marketplaceData = {
    field_id: 'test-field-id', // √Ä adapter selon votre terrain
    payment_type: 'marketplace_digital',
    mode: 'marketplace',
    owner_payout_channel: 'wave',
    owner_mobile_e164: '+221771234567',
    commission_rate_bps: 1000
  };

  const result = await apiRequest('POST', '/payment-methods', marketplaceData);
  
  if (result.success) {
    success('Marketplace digital configur√©');
    log(`Configuration: ${JSON.stringify(result.data.data.configuration, null, 2)}`, 'cyan');
    return result.data.data;
  } else {
    error(`Cr√©ation marketplace: ${result.error}`);
    return null;
  }
}

// 5. Test r√©cup√©ration moyens de paiement
async function testGetPaymentMethods() {
  info('Test r√©cup√©ration moyens de paiement...');
  
  const result = await apiRequest('GET', '/payment-methods');
  
  if (result.success) {
    const methods = result.data.data;
    success(`${methods.length} moyens de paiement r√©cup√©r√©s`);
    
    methods.forEach((method, index) => {
      log(`${index + 1}. ${method.payment_type} - ${method.field?.name || 'N/A'}`, 'cyan');
      if (method.payment_type === 'marketplace_digital') {
        log(`   üì± Mobile: ${method.configuration?.owner_mobile_e164 || 'N/A'}`, 'cyan');
        log(`   üí∞ Commission: ${(method.configuration?.commission_rate_bps || 0) / 100}%`, 'cyan');
      }
    });
    
    return methods;
  } else {
    error(`R√©cup√©ration √©chou√©e: ${result.error}`);
    return [];
  }
}

// 6. Test cr√©ation checkout marketplace
async function testMarketplaceCheckout() {
  info('Test cr√©ation checkout marketplace...');
  
  // D'abord cr√©er une r√©servation test
  const reservationData = {
    field_id: 'test-field-id',
    reservation_date: new Date().toISOString().split('T')[0],
    start_time: '14:00',
    end_time: '15:00',
    total_price: 10000
  };

  const reservationResult = await apiRequest('POST', '/reservations', reservationData);
  
  if (!reservationResult.success) {
    warning('Impossible de cr√©er r√©servation test pour checkout');
    return false;
  }

  const reservation = reservationResult.data.data;
  success(`R√©servation test cr√©√©e: ${reservation.id}`);

  // Tester le checkout marketplace
  const checkoutResult = await apiRequest('POST', '/marketplace/checkout', {
    reservation_id: reservation.id
  });

  if (checkoutResult.success) {
    const checkout = checkoutResult.data.data;
    success('Checkout marketplace cr√©√©');
    log(`Payment ID: ${checkout.payment_id}`, 'cyan');
    log(`Checkout URL: ${checkout.checkout_url}`, 'cyan');
    log(`Montant: ${checkout.amount} FCFA`, 'cyan');
    log(`Commission: ${checkout.platform_fee} FCFA`, 'cyan');
    return checkout;
  } else {
    error(`Checkout √©chou√©: ${checkoutResult.error}`);
    return null;
  }
}

// Fonction principale
async function runIntegrationTests() {
  log('üß™ === TEST INT√âGRATION OPTION 1 ===', 'magenta');
  log('Interface marketplace compl√®te avec 2 modes', 'magenta');
  log('', 'reset');

  const tests = [
    { name: 'Authentification', fn: testAuthentication },
    { name: 'Routes Marketplace', fn: testMarketplaceRoutes },
    { name: 'Paiement Traditionnel', fn: testTraditionalPaymentMethod },
    { name: 'Marketplace Digital', fn: testMarketplacePaymentMethod },
    { name: 'Liste Moyens Paiement', fn: testGetPaymentMethods },
    { name: 'Checkout Marketplace', fn: testMarketplaceCheckout }
  ];

  let results = [];

  for (const test of tests) {
    try {
      log(`\nüîç ${test.name}...`, 'yellow');
      const result = await test.fn();
      results.push({ name: test.name, success: !!result, result });
      
      if (!result && test.name === 'Authentification') {
        error('Test authentification √©chou√© - Arr√™t des tests');
        break;
      }
    } catch (err) {
      error(`Erreur test ${test.name}: ${err.message}`);
      results.push({ name: test.name, success: false, error: err.message });
    }
  }

  // R√©sum√©
  log('\nüìä === R√âSUM√â DES TESTS ===', 'magenta');
  results.forEach(result => {
    if (result.success) {
      success(`${result.name}: R√âUSSI`);
    } else {
      error(`${result.name}: √âCHOU√â`);
    }
  });

  const successCount = results.filter(r => r.success).length;
  const totalCount = results.length;

  log(`\nüéØ R√©sultat: ${successCount}/${totalCount} tests r√©ussis`, 
      successCount === totalCount ? 'green' : 'yellow');

  if (successCount === totalCount) {
    success('üéâ OPTION 1 pr√™te pour utilisation !');
    log('\nüìã Prochaines √©tapes:', 'blue');
    log('1. Remplacez votre modal actuel par PaymentModalUpgrade', 'cyan');
    log('2. Configurez vos cl√©s PayDunya et Wave', 'cyan');
    log('3. Testez en interface utilisateur', 'cyan');
  } else {
    warning('‚ö†Ô∏è  Certains tests ont √©chou√© - V√©rifiez la configuration');
  }
}

// Ex√©cuter les tests
if (require.main === module) {
  runIntegrationTests().catch(err => {
    error(`Erreur g√©n√©rale: ${err.message}`);
    process.exit(1);
  });
}

module.exports = { runIntegrationTests };
